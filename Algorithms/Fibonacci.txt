=== Fibonacco ===

Fn = Fn - 1 + Fn - 2

*** Recursive Algorith ***

    fib(n):
        if n <= 2: 
            f = 1
        else:
            f = fib(n - 1) + fib(n - 2)
        return f
    
    Exponentional time O(2^n)

*** Dynamic w/ Memoization ***

    memo = {}

    fib(n):
        if n in memo: 
            return memo[n]

        if n <= 2: 
            f = 1
        else 
            f = fib(n - 1) + f(n - 2)

        memo[n] = f

        return f

    memoized calls are O(1) (basically free)
    non-memoized calls are O(n)

    overall, we have linear time or O(n)

*** Bottom up DP algorithm ***

    fib = {}
    for k in range(1, n + 1):
        if k <= 2: 
            f = 1
        else:
            f = fib[k - 1] + fib[k - 2]
        fib[k] = f
    return fib[n]

    exactly same computation of memoized version 
    topological sort of subproblem dependancy DAG 
    can often save space (we only need the last 2 items)

    memoized calls are O(1) (basically free)
    non-memoized calls are O(n)

    overall, we have linear time or O(n)


