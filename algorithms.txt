=== ALGORITHMS ===

A recipe for solving a complex problem 

"Perhaps the most important principle for the good algorithm designer is to refuse to be conent."

Can we do better?

Recursive Algorithm : A function that calls itself with an increasingly smaller input. Must have a base case to prevent infinite looping.

*** Grade School Multiplication ***


  5678
x 1234
------


*** Karatsuba Multiplication ***

	A(56)(78)B
	C(12)(34)D
	----------
	
	10^n(ac) + 10^n/2( ad + bc ) + bd
	
	
*** Merge Sort ***
* Been around since 1945 - oldie by goodie

Input: array of n numbers, unsorted.
Output: same numbers, sorted in increasing order 

		54187263
		/		\
	5418		7263
	  |			  |
	1458		2367
		\		/
		12345678
		

*** Top 10 to know ***

	Make sure you understand the fundamental techniques for these 

	1. Depth First Search (DFS)
	2. Breadth First Search (BFS)
	3. Matching Parenthesis 
	4. Hash Tables 
	5. Variable/Pointer manipulation 
	6. Reversing a linked list 
	7. Sorting (QuickSort, MergeSort, HeapSort) - understand how they work 
	8. Recursion 
	9. Custom data structures / Object Oriented Programming (gumball question??)
	10. Binary Search 
