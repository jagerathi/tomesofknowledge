=== FIBONACHI SEQUENCE ===

FIB(n) = FIB(N-1) + FIB(N-2)

Base Cases:

N <= 2, RETURN 1

*** Resursive Solution ***

const fib = (n) => {

    if(n <= 2) return 1;

    return fib(n - 1) + fib(n - 2);
};

* Time Complexity: O(2^n)
* Space Complexity: O(n)


*** Dynamic Solution using Memoization ***

const fib = (n, memo = {}) => {

    if(n in memo) return memo[n];
    if(n <= 2) return 1;

    memo[n] = fib(n - 1, memo) + fib(n - 2, memo);
    return memo[n];
};


*** Dynamic Solution using Tabulization ***

const fib = (n) => {

    const table = Array(n+1).fill(0);
    table[1] = 1;

    for(let i = 0; i <= n; i++) {
        table[i + 1] += table[i];
        table[i + 2] += table[i];
    }    
    return table[n];
};

console.log(fib(6)); // 8
console.log(fib(7)); // 13
console.log(fib(8)); // 21
console.log(fib(50)); // 12586269025

Time Complexity: O(n)
Space Complexity: O(n)