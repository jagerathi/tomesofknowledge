=== HowSum ===

Test Case 

howSum(7, [5, 3, 4, 7])

valid answers are [7], [3,4]

*** Recursive Solution ***

const howSum = (targetSum, numbers) => {

    if(targetSum === 0) return [];
    if(targetSum < 0) return null;

    for(let num of numbers) {
        const remainder = targetSum - num;
        const remainderResult = howSum(remainder, numbers);
        if(remainderResult !== null) {
            return [ ...remainderResult, num];
        }
    }

    return null;
};

m = targetSum 
n = array length 

Time complexity: O(n^m * m)
Space Complexity: O(m)

*** Dynamic Solution with Memoization ***

const howSum = (targetSum, numbers, memo = {}) => {

    if(targetSum in memo) return memo[targetSum];
    if(targetSum === 0) return [];
    if(targetSum < 0) return null;

    for(let num of numbers) {
        const remainder = targetSum - num;
        const remainderResult = howSum(remainder, numbers, memo);
        if(remainderResult !== null) {
            memo[targetSum] = [ ...remainderResult, num];
            return memo[targetSum];
        }
    }

    memo[targetSum] = null;
    return null;
};

m = targetSum 
n = array length 

Time complexity: O(n * m^2 )
Space Complexity: O(m^2)


*** Dynamic Solution using Tabulation ***

howSum( 7, [ 5, 3, 4 ]) -> [ 3, 4 ] or [ 4, 3 ]

Table Size: targetSum + 1

Initialize: null 
Seed: Index 0 = []

const howSum = (targetSum, numbers) => {

    const table = Array(targetSum + 1).fill(null);
    table[0] = [];

    for(let i = 0; i <= targetSum; ++i) {
        if(table[i] != null) {
            for(let num of numbers) {
                table[i + num] = [ ...table[i], num ];
            }
        }
    }

    return table[targetSum];

};

console.log(canSum(7, [ 2, 3 ]));   // true 
console.log(canSum(7, [ 5, 3, 4 ])); // true 
console.log(canSum(7, [ 2, 4 ])); // false
console.log(canSum(8, [ 2, 3, 5 ])); // true 
console.log(canSum(300, [ 7, 14 ])); // false 


Time Complexity:    O(m^2 * n)
Space Complexity:   O(m^2)

