=== HowSum ===

Test Case 

howSum(7, [5, 3, 4, 7])

valid answers are [7], [3,4]

*** Recursive Solution ***

const howSum = (targetSum, numbers) => {

    if(targetSum === 0) return [];
    if(targetSum < 0) return null;

    for(let num of numbers) {
        const remainder = targetSum - num;
        const remainderResult = howSum(remainder, numbers);
        if(remainderResult !== null) {
            return [ ...remainderResult, num];
        }
    }

    return null;
};

m = targetSum 
n = array length 

Time complexity: O(n^m * m)
Space Complexity: O(m)

*** Dynamic Solution with Memoization ***

const howSum = (targetSum, numbers, memo = {}) => {

    if(targetSum in memo) return memo[targetSum];
    if(targetSum === 0) return [];
    if(targetSum < 0) return null;

    for(let num of numbers) {
        const remainder = targetSum - num;
        const remainderResult = howSum(remainder, numbers, memo);
        if(remainderResult !== null) {
            memo[targetSum] = [ ...remainderResult, num];
            return memo[targetSum];
        }
    }

    memo[targetSum] = null;
    return null;
};

m = targetSum 
n = array length 

Time complexity: O(n * m^2 )
Space Complexity: O(m^2)



