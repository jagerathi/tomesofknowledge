=== COUNTCONSTRUCT ===

*** Recursive Solution ***

const countConstruct = (target, wordBank) => {

    if(target === '') return 1;

    let totalCount = 0;

    for(let word of wordBank) {
        if(target.indexOf(word) === 0) {
            const numWaysForRest = countConstruct(target.slice(word.length), wordBank);
            totalCount += numWaysForRest;
        }
    }

    return totalCount;
};

console.log(countConstruct('purple', [ 'purp', 'p', 'ur', 'le', 'purpl' ])); // 2
console.log(countConstruct('abcdef', [ 'abc', 'cd', 'def', 'abcd'])); // 1
console.log(countConstruct('skateboard', [ 'bo', 'rd', 'ate', 't', 'ska', 'sk', 'boar'])); // 0
console.log(countConstruct('enterapotentpot', [ 'a', 'p', 'ent', 'enter', 'ot', 'o', 't'])); // 4
console.log(countConstruct('eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeef', [ 'e', 'ee', 'eee', 'eeee', 'eeeee'])); // 0

m = target.length
n = wordbank.length

Time Complexity: O(n^m * m)
Space Complexity: O(m^2)


*** Dynamic Solution with Memoization ***

const countConstruct = (target, wordBank, memo = {}) => {

    if(target in memo) return memo[target];
    if(target === '') return 1;

    let totalCount = 0;

    for(let word of wordBank) {
        if(target.indexOf(word) === 0) {
            const numWaysForRest = countConstruct(target.slice(word.length), wordBank, memo);
            totalCount += numWaysForRest;
        }
    }

    memo[target] = totalCount;
    return totalCount;
};

console.log(countConstruct('purple', [ 'purp', 'p', 'ur', 'le', 'purpl' ])); // 2
console.log(countConstruct('abcdef', [ 'abc', 'cd', 'def', 'abcd'])); // 1
console.log(countConstruct('skateboard', [ 'bo', 'rd', 'ate', 't', 'ska', 'sk', 'boar'])); // 0
console.log(countConstruct('enterapotentpot', [ 'a', 'p', 'ent', 'enter', 'ot', 'o', 't'])); // 4
console.log(countConstruct('eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeef', [ 'e', 'ee', 'eee', 'eeee', 'eeeee'])); // 0

m = target.length
n = wordbank.length

Time Complexity: O(n * m^2)
Space Complexity: O(m^2)
