=== CANCONSTRUCT ===

Test Cases

    canConstruct('abcefg', [ 'abc', 'ab', 'abcd', 'ef'])

    canConsruct( 'skateboard', [ 'bo', 'rd', 'ate', 't', 'ska', 'sk', 'boar' ])


*** Recursive Solution ***

const canConstruct = (target, wordBank) => {
    if(target === '') return true;

    for(let word of wordBank) {

        if(target.indexOf(word) === 0) {
            const suffix = target.slice(word.length);
            if( canConstruct(suffix, wordBank) === true ) {
                return true;
            }
        }
    }
    return false;
};

console.log(canConstruct('abcdef', [ 'ab', 'abc', 'cd', 'def', 'abcd']));
console.log(canConstruct('skateboard', [ 'bo', 'rd', 'ate', 't', 'ska', 'sk', 'boar']));
console.log(canConstruct('enterapotentpot', [ 'a', 'p', 'ent', 'enter', 'ot', 'o', 't']));
console.log(canConstruct('eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeef', [ 'e', 'ee', 'eee', 'eeee', 'eeeee', 'eeeeee']));


m = target.length
n = wordbank.length

Time Complexity: O(n^m * m)
Space Complexity: O(m^2)

*** Dynamic Solution using Memoization ***

const canConstruct = (target, wordBank, memo = {}) => {

    if(target in memo) return memo[target];
    if(target === '') return true;

    for(let word of wordBank) {

        if(target.indexOf(word) === 0) {
            const suffix = target.slice(word.length);
            if( canConstruct(suffix, wordBank, memo) === true ) {
                memo[target] = true;
                return true;
            }
        }
    }
    memo[target] = false;
    return false;
};

console.log(canConstruct('abcdef', [ 'ab', 'abc', 'cd', 'def', 'abcd']));
console.log(canConstruct('skateboard', [ 'bo', 'rd', 'ate', 't', 'ska', 'sk', 'boar']));
console.log(canConstruct('enterapotentpot', [ 'a', 'p', 'ent', 'enter', 'ot', 'o', 't']));
console.log(canConstruct('eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeef', [ 'e', 'ee', 'eee', 'eeee', 'eeeee', 'eeeeee']));


m = target.length
n = wordbank.length

Time Complexity: O(n * m^2)
Space Complexity: O(m^2)
