=== BESTSUM ===

Write a function bestSum(targetSum, number) that takes in a targetSum and an array of numbers as arguments.

The function should return an array containing the shortest combination of numbers that add up to exactly the targetSum.

IF there is a tie for the shortest combination, you may return any one of the shortest.

*** Test Case ***

    bestSum( 7, [5, 3, 4, 7])

        [3, 4] or [7] = [7] is the shortest 


*** Resursive Solution ***

const bestSum = (targetSum, numbers) => {

    if(targetSum === 0 ) return [];
    if(targetSum < 0) return null;

    let shortestCombination = null;

    for(let num of numbers) {
        const remainder = targetSum - num;
        const remainderResult = bestSum(remainder, numbers);
        if(remainderResult !== null) {

            const combination = [ ...remainderResult, nul ];

            if(shortestCombination === null || combination.length < shortestCombination.length) {
                shortestCombination = combination;
            }
        }
    }

    return shortestCombination;
};

console.log(bestSum(7, [5, 3, 4, 7]));
console.log(bestSum(8, [2, 3, 5]));
console.log(bestSum(8, [1, 4, 5]));
console.log(bestSum(100, [1, 2, 5, 25]));

m = target sum 
n = array length 

Time Complexity:    O(n^m * m)
Space Complexity:   O(m^2)


*** Dynamic Solution with Memoization ***

const bestSum = (targetSum, numbers, memo = {}) => {

    if(targetSum in memo) return memo[targetSum];
    if(targetSum === 0 ) return [];
    if(targetSum < 0) return null;

    let shortestCombination = null;

    for(let num of numbers) {
        const remainder = targetSum - num;
        const remainderResult = bestSum(remainder, numbers, memo);
        if(remainderResult !== null) {

            const combination = [ ...remainderResult, nul ];

            if(shortestCombination === null || combination.length < shortestCombination.length) {
                shortestCombination = combination;
            }
        }
    }

    memo[targetSum] = shortestCombination;
    return shortestCombination;
};

console.log(bestSum(7, [5, 3, 4, 7]));
console.log(bestSum(8, [2, 3, 5]));
console.log(bestSum(8, [1, 4, 5]));
console.log(bestSum(100, [1, 2, 5, 25]));

m = target sum 
n = array length 

Time Complexity:    O(m^2 * n)
Space Complexity:   O(m^2)