=== GRID TRAVELER ===

gridTraveler(rows, cols)

* Can only travel down and right 

Base Cases:

    Rows = 0 INVALID
    Cols = 0 INVALID 
    Row = 1 and Col = 1 we are HOME, RETURN 1

*** Tree Representation ***

gridTraveler(2,3)

Left = Down, Right = Right 

                                (2,3)
                            /           \
                    (1,3)                       (2,2)
                    /   \                   /          \
                (0,3)   (1,2)           (1,2)           (2,1)
                        /   \           /   \           /   \   
                    (0,2)   (1,1)   (0,2)   (1,1)   (1,1)   (0,0)

This is just an adaptation of Fibonachi 

*** Recursive Solution ***

const gridTraveler = (m,n) => {

    if(m === 1 && n === 1) return 1;
    if(m === 0 || n === 0) reutrn 0;

    return gridTravel(m - 1, n) + gridTraveler(m, n - 1);
};

Time Complexity = O(2^n+m)
Space Complexity = O(n + m)

*** Dynamic Solution using Memoization *** 

gridTraveler(m, n) = gridTraveler(n, m)

const gridTraveler = (m, n, memo={}) => {
    const key = m + ',' + n;

    if(key in memo) return memo[key];

    if(m === 1 && n === 1) return 1;
    if(m === 0 || n === 0) reutrn 0;

    memo[key] = gridTraveler(m - 1, n, memo) + gridTraveler(m, n - 1, memo);
    return memo[key];
};

Time Complexity = O(m * n)
Space Complexity = O(m + n)