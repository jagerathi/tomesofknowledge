=== CanSum ===

Write a function canSum(targetSum, numbers) that takes in a targetSum and an array of numbers as arguments.

The function should return a boolean indicating whether or not it is possible to generate
the target sum using numbers from the array.

You may use an element of the array as many times as needed.

You may assume that all input numbers are non-negative.

*** Test Case ***

canSum(7, [5, 3, 4, 7]) -> true 

                                    (7)
                        /        /           \          \
                        -5      -3          -4          -7
                    (2)         (4)         (3)         (0)
                                -4          -3          
                                (0)         (0)


*** Recursive Solution ***

const canSum = (targetSum, number) => {
    if(targetSum === 0) return true;
    if(targetSum < 0) return false;

    for(let sum of numbers) {
        const remainder = targetSum - num;

        if( canSum(remainder, numbers) === true) {
            return true;
        }
    }

    return false;
};

m = target sum 
n = array length 

Time Complexity: O(n ^ m)
Space Complexity: O(m) 

*** Dynamic Solution using Memoization ***

const canSum = (targetSum, numbers, memo={}) => {

    if(targetSum in memo) return memo[targetSum];
    if(targetSum === 0) return true;
    if(targetSum < 0) return false;

    for(let num of numbers) {
        const remainer = targetSum - sum;
        if(canSum(remainder, numbers, memo) === true) {
            memo[targetSum] = true;
            return true;
        }
    }

    memo[targetSum] = false;
    return false;
}

m = target sum 
n = array length 

Time Complexity: O(n * m)
Space Complexity: O(m) 

