==== UNIT TESTING ====

*** TESTING TOOLS ***

	* Google Test (C++, xUnit framework, on github)
	* Google Mock (C++, part of Google Test)
	* xUnit (xunit.net, .net, open source)
	* NUnit (.net, open source)
	* MSTest

* UNIT TEST = Tests a unit of an application without its external dependancies 

	* Cheap to write 
	* execute fast 
	
* INTEGRATION TEST = Tests the application with its external dependancies

	* take longer to execute 
	* give you more confidence in the health of your application 
	
* END-TO-END Test 

	* Drives an application through its UI 
	* Give you the greatest confidence 
	* Very slow 
	* Very brittle 
	
*** Test Pyramid ***

	E2E				    ==
	Integration 	  ======
	Unit			==========
	
	* Favor units because they are cheap and fast 
	* cover unit test gaps with integration tests 
	* Use end-to-end tests sparingly
	
*** Testing Frameworks ***

	* NUnit
	* MSTest
	* xUnit 
	
*** MSTest ***

	* Test class is decorated with [TestClass]
	* Test method is decorated with [TestMethod]
	* Asset.IsTrue()
	
*** NUnit ***

	* Install through package manager: 
		install-package NUnit -Version 3.8.1
		install-package NUnit3TestAdapter -Version 3.8.0
	* Test class is decorated with [TestFixture]
	* Test method is decorated with [Test]
	* Asset.That()
	* Setup is decorated with [SetUp]
	* Teardown is decorated with [TearDown]
	* Use [TestCase] to create multiple test cases for a paramaterized test method 
	* Use [Ignore(<reason>)] to skip a test 
	* Assertions
		* Is.EqualTo
		* Is.Not.EqualTo
		* Is.Null
		* Is.Not.Null 
		* Does.StartWith
		* Does.Contain
		* Does.EndsWith
		* IgnoreCase can be chained for strings 
		* Is.EquivalentTo 
		* Is.Ordered 
		* Is.Unique 
		* Is.Not.Empty 
		* Is.TypeOf<type>
		* Is.InstanceOf<type>
		* For exceptions: 
			* Assert.That(() => logger.Log(error), Throws.ArgumentNullException)
			* Assert.That(() => logger.Log(error), Throws.Exception.TypeOf<type>)

	
*** Conventions ***

	* Project name should be MainProjectName.UnitTests
	* Class name should match the class we are testing - Reservations would be ReservationTests 
	* Test setup - Triple A
		** Arrange
		** Act
		** Assert 
	* Test Method Name: [MethodName]_[Scenario]_[ExpectedBehavior]
		

*** Characteristics of a good unit test ***

	* First-class citizen
	* clean, readable and maintainable 
	* no logic 
	* isolated 
	* not too specific or general 

*** What to test? ***

	* Testable code is clean, clean code is testable 
	* Query - returns data 
	* Command - runs a command 
	* 

*** Trustworthy Tests ***

	* When i passed, you know your code is good. when it fails, know your code has problem.
	* Works well with TDD 
	* When you test the wrong thing, your test is untrustworthy
	* Verify that your tests are testing the correct thing 

*** Core Unit Testing Techniques ****

	* Testing Strings 
		* balance between too general and too specific 